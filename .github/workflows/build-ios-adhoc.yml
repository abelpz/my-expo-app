name: Build iOS Ad-hoc Distribution

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'adhoc'
        type: choice
        options:
        - adhoc
        - enterprise
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - none

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: 🏗 Setup repo
      uses: actions/checkout@v4
      
    - name: 🏗 Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: npm
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔧 Setup Expo CLI
      run: npm install -g @expo/cli@latest
      
    - name: 📱 Install iOS build tools
      run: |
        # Install fastlane for iOS deployment
        sudo gem install fastlane
        
        # Install cocoapods
        sudo gem install cocoapods
        
    - name: 🔐 Setup Apple Certificates
      env:
        APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
        APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        APPLE_PROVISIONING_PROFILE_DATA: ${{ secrets.APPLE_PROVISIONING_PROFILE_DATA }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create a new keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        echo "$APPLE_CERT_DATA" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$APPLE_CERT_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$APPLE_PROVISIONING_PROFILE_DATA" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/app.mobileprovision
        
        # Clean up
        rm certificate.p12
        
    - name: 🔢 Update version (optional)
      if: ${{ github.event.inputs.version_bump != 'none' }}
      run: |
        if [ "${{ github.event.inputs.version_bump }}" != "none" ]; then
          npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version
          
          # Update version in app.json
          VERSION=$(node -p "require('./package.json').version")
          node -e "
            const fs = require('fs');
            const appConfig = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            appConfig.expo.version = '$VERSION';
            fs.writeFileSync('app.json', JSON.stringify(appConfig, null, 2));
          "
          
          echo "Updated version to: $VERSION"
        fi
        
    - name: 🏗 Prebuild Expo project
      run: |
        # Prebuild the native iOS project
        expo prebuild --platform ios --clean
        
    - name: 📋 Configure iOS project
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        BUNDLE_IDENTIFIER: ${{ secrets.IOS_BUNDLE_IDENTIFIER }}
      run: |
        # Update bundle identifier and team ID in iOS project
        PLIST_PATH="ios/obsapp/Info.plist"
        PBXPROJ_PATH="ios/obsapp.xcodeproj/project.pbxproj"
        
        # Set bundle identifier
        if [ ! -z "$BUNDLE_IDENTIFIER" ]; then
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_IDENTIFIER" "$PLIST_PATH"
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = .*/PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_IDENTIFIER;/g" "$PBXPROJ_PATH"
        fi
        
        # Set team ID
        if [ ! -z "$APPLE_TEAM_ID" ]; then
          sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = $APPLE_TEAM_ID;/g" "$PBXPROJ_PATH"
        fi
        
        # Configure for ad-hoc distribution
        sed -i '' "s/CODE_SIGN_IDENTITY = .*/CODE_SIGN_IDENTITY = \"iPhone Distribution\";/g" "$PBXPROJ_PATH"
        
    - name: 📦 Install iOS dependencies
      run: |
        cd ios
        pod install --repo-update
        
    - name: 🔨 Build iOS app
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        cd ios
        
        # Build the archive
        xcodebuild \
          -workspace obsapp.xcworkspace \
          -scheme obsapp \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/obsapp.xcarchive \
          archive \
          CODE_SIGN_IDENTITY="iPhone Distribution" \
          DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          CODE_SIGN_STYLE=Manual
          
    - name: 📦 Export IPA
      run: |
        cd ios
        
        # Create export options plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>${{ github.event.inputs.build_type }}</string>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>compileBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # Export the IPA
        xcodebuild \
          -exportArchive \
          -archivePath build/obsapp.xcarchive \
          -exportOptionsPlist ExportOptions.plist \
          -exportPath build/
          
    - name: 📋 Generate installation manifest
      env:
        IPA_URL: ${{ secrets.IPA_DOWNLOAD_URL }}
        BUNDLE_IDENTIFIER: ${{ secrets.IOS_BUNDLE_IDENTIFIER }}
      run: |
        VERSION=$(node -p "require('./package.json').version")
        APP_NAME=$(node -p "require('./app.json').expo.name")
        
        mkdir -p dist
        
        # Create manifest.plist for over-the-air installation
        cat > dist/manifest.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>items</key>
            <array>
                <dict>
                    <key>assets</key>
                    <array>
                        <dict>
                            <key>kind</key>
                            <string>software-package</string>
                            <key>url</key>
                            <string>${IPA_URL}/obsapp.ipa</string>
                        </dict>
                    </array>
                    <key>metadata</key>
                    <dict>
                        <key>bundle-identifier</key>
                        <string>${BUNDLE_IDENTIFIER}</string>
                        <key>bundle-version</key>
                        <string>${VERSION}</string>
                        <key>kind</key>
                        <string>software</string>
                        <key>title</key>
                        <string>${APP_NAME}</string>
                    </dict>
                </dict>
            </array>
        </dict>
        </plist>
        EOF
        
        # Create installation HTML page
        cat > dist/install.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>Install ${APP_NAME}</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { font-family: -apple-system, sans-serif; padding: 20px; text-align: center; }
                .install-button { 
                    display: inline-block; 
                    padding: 12px 24px; 
                    background: #007AFF; 
                    color: white; 
                    text-decoration: none; 
                    border-radius: 8px; 
                    margin: 20px;
                }
                .instructions { max-width: 600px; margin: 0 auto; text-align: left; }
            </style>
        </head>
        <body>
            <h1>Install ${APP_NAME}</h1>
            <p>Version: ${VERSION}</p>
            <a href="itms-services://?action=download-manifest&url=${IPA_URL}/manifest.plist" class="install-button">
                Install on iOS Device
            </a>
            
            <div class="instructions">
                <h3>Installation Instructions:</h3>
                <ol>
                    <li>Open this page on your iOS device</li>
                    <li>Tap the "Install on iOS Device" button above</li>
                    <li>Allow the app to install when prompted</li>
                    <li>Go to Settings > General > Device Management</li>
                    <li>Trust the developer profile</li>
                    <li>The app will now be available on your home screen</li>
                </ol>
                
                <p><strong>Note:</strong> This is an ad-hoc distribution build. Make sure your device's UDID is registered with the provisioning profile.</p>
            </div>
        </body>
        </html>
        EOF
        
    - name: 📁 Copy build artifacts
      run: |
        cp ios/build/obsapp.ipa dist/
        
        # Create build info
        cat > dist/build-info.json << EOF
        {
          "version": "$(node -p "require('./package.json').version")",
          "buildDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "buildType": "${{ github.event.inputs.build_type }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}"
        }
        EOF
        
    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-${{ github.event.inputs.build_type }}-${{ github.run_number }}
        path: |
          dist/
        retention-days: 30
        
    - name: 📋 Build Summary
      run: |
        echo "## 🎉 iOS Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type:** ${{ github.event.inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** $(node -p "require('./package.json').version")" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 Installation:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the artifacts from this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "2. Extract the zip file to get the IPA and installation files" >> $GITHUB_STEP_SUMMARY
        echo "3. Host the files on a web server with HTTPS" >> $GITHUB_STEP_SUMMARY
        echo "4. Open the install.html page on an iOS device to install" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Files Generated:" >> $GITHUB_STEP_SUMMARY
        echo "- \`obsapp.ipa\` - The iOS application package" >> $GITHUB_STEP_SUMMARY
        echo "- \`manifest.plist\` - Installation manifest" >> $GITHUB_STEP_SUMMARY
        echo "- \`install.html\` - Web installation page" >> $GITHUB_STEP_SUMMARY
        echo "- \`build-info.json\` - Build metadata" >> $GITHUB_STEP_SUMMARY 