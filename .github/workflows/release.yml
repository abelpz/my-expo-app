name: Build and Release Apps

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: 'Upload to existing release (provide tag name)'
        required: false
        default: ''
      build_type:
        description: 'Build type'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - release
  push:
    branches:
      - main
      - 'release/**'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Generate native code (prebuild)
        run: npx expo prebuild --platform android --no-install

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleRelease --no-daemon

      - name: Prepare APK artifact
        run: |
          # Find the generated APK
          APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -1)
          
          if [ -f "$APK_PATH" ]; then
            # Determine filename based on trigger type
            if [ "${{ github.event_name }}" = "release" ]; then
              FILENAME="obs-app-${{ github.event.release.tag_name }}.apk"
            elif [ "${{ github.event.inputs.upload_to_release }}" != "" ]; then
              FILENAME="obs-app-${{ github.event.inputs.upload_to_release }}.apk"
            else
              FILENAME="obs-app-${{ github.sha }}.apk"
            fi
            
            cp "$APK_PATH" "$FILENAME"
            echo "APK_FILENAME=$FILENAME" >> $GITHUB_ENV
            echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          else
            echo "APK file not found"
            exit 1
          fi

      - name: Upload APK to Release (if release event)
        if: github.event_name == 'release' || github.event.inputs.upload_to_release != ''
        run: |
          TAG_NAME="${{ github.event.release.tag_name || github.event.inputs.upload_to_release }}"
          gh release upload "$TAG_NAME" "${{ env.APK_FILENAME }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK as Artifact (for testing)
        if: github.event_name != 'release' && github.event.inputs.upload_to_release == ''
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: ${{ env.APK_FILENAME }}
          retention-days: 30

  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate native code (prebuild)
        run: npx expo prebuild --platform ios --no-install

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      - name: Build iOS App
        run: |
          cd ios
          xcodebuild -workspace *.xcworkspace \
            -scheme obs-app \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath obs-app.xcarchive \
            archive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath obs-app.xcarchive \
            -exportPath . \
            -exportOptionsPlist exportOptions.plist

      - name: Prepare IPA artifact
        run: |
          # Find the generated IPA
          IPA_PATH=$(find ios -name "*.ipa" | head -1)
          
          if [ -f "$IPA_PATH" ]; then
            # Determine filename based on trigger type
            if [ "${{ github.event_name }}" = "release" ]; then
              FILENAME="obs-app-${{ github.event.release.tag_name }}.ipa"
            elif [ "${{ github.event.inputs.upload_to_release }}" != "" ]; then
              FILENAME="obs-app-${{ github.event.inputs.upload_to_release }}.ipa"
            else
              FILENAME="obs-app-${{ github.sha }}.ipa"
            fi
            
            cp "$IPA_PATH" "$FILENAME"
            echo "IPA_FILENAME=$FILENAME" >> $GITHUB_ENV
            echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV
          else
            echo "IPA file not found"
            exit 1
          fi

      - name: Upload IPA to Release (if release event)
        if: github.event_name == 'release' || github.event.inputs.upload_to_release != ''
        run: |
          TAG_NAME="${{ github.event.release.tag_name || github.event.inputs.upload_to_release }}"
          gh release upload "$TAG_NAME" "${{ env.IPA_FILENAME }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload IPA as Artifact (for testing)
        if: github.event_name != 'release' && github.event.inputs.upload_to_release == ''
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ${{ env.IPA_FILENAME }}
          retention-days: 30 